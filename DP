//To check if target k can be achieved by any subset of an array of coins
//O(n*k)
bool subsetSum(vector<ll>& coins, ll k)
{
    int n = coins.size();
    vector<bool> dp(k + 1, false); 
    dp[0] = true; 
    for (int coin : coins) 
        for (int j = k; j >= coin; --j) 
            dp[j] = dp[j] || dp[j - coin];
    return dp[k];
}


//To find all distinct sums which can be formed by any subset of an array of coins
//O(n*max_sum)
vector<ll> findDistinctSums(vector<ll>& coins) 
{
    int max_sum = accumulate(coins.begin(), coins.end(), 0);
    vector<bool> dp(max_sum + 1, false);
    dp[0] = true;
    for (int coin : coins) 
        for (int j = max_sum; j >= coin; --j) 
            dp[j] = dp[j] || dp[j - coin];
    vector<int> result;
    for (int i = 0; i <= max_sum; i++) 
        if (dp[i]) 
            result.push_back(i);
    return result;
}


//Number of ways to make target x by using any subset of an array of coins
//O(n*x)
ll solve(ll N, ll X, vector<ll>& coins)
{
    ll dp[X + 1] = {};
    dp[0] = 1;
    for (int i = 1; i <= X; i++) 
    {
        for (int j = 0; j < N; j++) 
        {
            if (coins[j] > i)
                continue;
            dp[i] = (dp[i] + dp[i - coins[j]]) % mod;
        }
    }
    return dp[X];
}



//To check if we can partition an array into 2 parts with equal sums , check if target = total_sum/2 can be achieved or not

